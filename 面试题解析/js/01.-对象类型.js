function test(person) {
    person.age = 26
    person = {
        name: 'yyy',
        age: 30
    }
    return person
}
const p1 = {
    name: 'yck',
    age: 25
}
const p2 = test(p1)
console.log(p1)
console.log(p2)

/**
 * 知识点: 1.js函数中所有的参数都是按照值进行传递的
 *        2.参数传递过程中分为两种情况:
 *              1.被传递参数类型为值类型
 *              2.被传递参数类型为引用类型
 *          2.1被传递参数为值类型的时候，就将值复制一个给参数(函数的局部变量)
 *          2.2被传递的参数为引用类型的时候，就将这个值内存的指针复制给一个给参数
 * 解释:
 *      1.首先person复制到了p1的地址(这里是p1是引用类型，p1和person指向同一个地址)
 *      进入到test函数p1对象和函数内的局部变量person拥有同一个指针，所有当在函数内修改
 *      age的值为26时,p1对象的age也会被修改为26，但是当在函数内部将person重写为其他对象当时候
 *      就相当于把函数内当person之前的指针给修改了（这个地方注意了，只是内部的person修改了，
        外面的p1现在已经和他没有联系了，之前有联系是因为二者指向同一个地址，现在内部的局部变量的指针指向了
        新的对象，而p1依然是被修改过的）； 所以输出console.log({name:'yck',age: 26})
        2.p2等于函数返回了这个新对象

 */